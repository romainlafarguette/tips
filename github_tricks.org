#+TITLE:     Tips for Github
#+AUTHOR:    Romain Lafarguette
#+EMAIL:     rlafarguette@imf.org
#+DATE:      Time-stamp: "2021-06-21 17:40:04 RLafarguette"

* Update the local rep from the remote repo

# Download all commit and info from the source
git fetch --all 

# Set the local on the source
git reset --hard origin/master

# Pull everything from source
git pull origin master

* Software
  1. At the Fund: Use Portable Git to access Git 
  2. Use git-cmd.exe 
  3. From the terminal, go to a given repo (use cd.. and dir)
     
* Initialize Git repo
git init [project-name]

* Check the status of a repo
git status

* Add files ("stage" or "index" them before commit)

** Single file
git add [file]

** File type
git add *.py

** All files 
git add -A

* Unstage file
git rm -- [file]

* Commit 
git commit -m "This is my commit comment!"

* Push on Github

** Regular push
git push -u origin master

** First  time, add origin
git remote add origin https://github.com/cubeton/mynewrepository.git

** Push a branch on Github
git push origin my-new-branch

** Solve ref issue
git push origin HEAD:master

** Force a push
git push --force
git push --set-upstream origin main --force

* Git ignore
Create a .gitignore file somewhere with:

# -*- mode: gitignore; -*-

# Org-mode
.org-id-locations
*_archive

# Emacs temporary files
*[#]*[#]
*[#]*

# Executables and word files
*.docx
*.exe

# Entire folders
Archives/
auto/

* Pull from Github (an already existing project, else clone)
git pull origin master

** If following-untracked-working-tree-files-would-be-overwritten-by-merge
git add * 
git stash
git pull

* Create a branch
git branch [branch-name]

* Remove deleted files
git add -u
* Submodules

# First (local name can be ignored)
git submodule add <github link> <local name>

# Then to update (don't use --init as I noticed it creates issues)
git submodule update --recursive

# In case of issue: realign the commits (this will discard the commits !)
git submodule foreach git reset --hard

# In case of big problems: 

# Remove a submodule
1. Delete the relevant line from the . gitmodules file.
2. Delete the relevant section from . git/config . (very important)
3. Run git rm --cached -r path_to_submodule (no trailing slash).
4. Commit and delete the now untracked submodule files.

# Solve recursive issues
git submodule update --force --recursive --remote



* Useful when can not add a folder
https://danielmiessler.com/blog/git-modified-untracked/
- git rm --cached /myfolder
- rename the folder
- git status => check if the new folder is in
- put the name back
- git status, git add /myfolder, git commit




* Login problem with command line
Just modify the config file in .git folder by including pwd in url:
The pwd should be the personal token access (developer settings => security)


[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true

[user]
        email = romain.lafarguette@gmail.com
        user = romainlafarguette

[branch "main"]
[remote "origin"]
        url = https://romainlafarguette:TOKEN@github.com/romainlafarguette/waemu8solvency.git        
	fetch = +refs/heads/*:refs/remotes/origin/*

